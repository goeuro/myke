// Code generated by go-bindata.
// sources:
// tmp/LICENSES
// tmp/version
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpLicenses = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\xcf\x73\xdb\xba\x11\xc7\xef\xf8\x2b\x76\x72\xe8\xc4\x1d\x46\x4a\xdc\x4e\x0e\xc9\x89\xa6\x60\x09\x2f\x12\xa9\x12\x94\x5d\x1d\x21\x12\x12\xf1\x42\x02\x2c\x00\xca\x4f\xfd\xeb\x3b\x80\x28\x89\xb2\x9d\x3c\x27\x4d\x9b\x43\x74\x8a\x48\xe2\xc7\xee\x72\xf7\x83\x2f\xd7\x49\xe6\x38\x06\x9a\x2c\xd2\x08\xc3\x94\x44\x38\xa6\x98\x22\xb4\x11\xb6\x6c\x57\x83\x5c\xd5\xc3\x8d\xe2\xad\x56\xc3\x7a\xf7\x99\x23\x84\x66\x24\x83\xa9\xc8\xb9\x34\x1c\xa1\x48\x35\x3b\x2d\x36\xa5\x85\xd7\xf9\x15\x5c\xbf\x7d\xf7\x1e\xc6\x0a\xb7\x5a\x41\xa6\xd9\x96\x57\x30\xae\x57\x13\x84\xe6\x5c\xd7\xc2\x18\xa1\x24\x08\x03\x25\xd7\x7c\xb5\x83\x8d\x66\xd2\xf2\x22\x80\xb5\xe6\x1c\xd4\x1a\xf2\x92\xe9\x0d\x0f\xc0\x2a\x60\x72\x07\x0d\xd7\x46\x49\x50\x2b\xcb\x84\x14\x72\x03\x0c\x72\xd5\xec\x90\x5a\x83\x2d\x85\x01\xa3\xd6\xf6\x81\x69\x0e\x4c\x16\xc0\x8c\x51\xb9\x60\x96\x17\x50\xa8\xbc\xad\xb9\xb4\xcc\xba\xfd\xd6\xa2\xe2\x06\x5e\xdb\x92\xc3\x2b\xda\xcd\x78\x75\xe5\x37\x29\x38\xab\x90\x90\xe0\x9e\x1d\x1e\xc1\x83\xb0\xa5\x6a\x2d\x68\x6e\xac\x16\xb9\x5b\x23\x00\x21\xf3\xaa\x2d\x9c\x0d\x87\xc7\x95\xa8\x45\xb7\x83\x9b\xee\x63\x60\x90\x55\xd0\x1a\x1e\x78\x3b\x03\xa8\x55\x21\xd6\xee\x5f\xee\xdd\x6a\xda\x55\x25\x4c\x19\x40\x21\xdc\xd2\xab\xd6\xf2\x00\x8c\xbb\xe9\x83\x19\x38\x3f\x86\x4a\x83\xe1\x55\x85\x72\xd5\x08\x6e\xc0\xfb\x7a\xb2\xce\x8f\x71\xa6\x37\x2e\xa0\xb6\x0b\x91\x71\x77\x1e\x4a\x55\x9f\x7b\x22\x0c\x5a\xb7\x5a\x0a\x53\x72\x3f\xa7\x50\x60\x94\xdf\xf1\x77\x9e\x5b\x77\xc7\x0d\x5f\xab\xaa\x52\x0f\xce\xb5\x5c\xc9\x42\x38\x8f\xcc\x07\x84\xb2\x92\x03\x5b\xa9\x2d\xf7\xbe\xec\x5f\xb1\x54\x56\xe4\xfb\x70\xfb\x17\xd0\x9c\xde\x6a\xf7\xc8\x94\xac\xaa\x60\xc5\xbb\x80\xf1\x02\x84\x04\xd6\x73\x47\xbb\xed\x8d\x65\xd2\x0a\x56\x41\xa3\xb4\xdf\xef\xb1\x9b\x03\x84\xb2\x09\x06\x9a\xdc\x66\xf7\x61\x8a\x81\x50\x98\xa7\xc9\x1d\x19\xe1\x11\xbc\x0a\x29\x10\xfa\x2a\x80\x7b\x92\x4d\x92\x45\x06\xf7\x61\x9a\x86\x71\xb6\x84\xe4\x16\xc2\x78\x09\x9f\x48\x3c\x0a\x00\xff\x73\x9e\x62\x4a\x21\x49\x11\x99\xcd\xa7\x04\x8f\x02\x20\x71\x34\x5d\x8c\x48\x3c\x86\x9b\x45\x06\x71\x92\xc1\x94\xcc\x48\x86\x47\x90\x25\xe0\x36\xec\x96\x22\x98\xba\xc5\x66\x38\x8d\x26\x61\x9c\x85\x37\x64\x4a\xb2\x65\x80\x6e\x49\x16\xbb\x35\x6f\x93\x14\x42\x98\x87\x69\x46\xa2\xc5\x34\x4c\x61\xbe\x48\xe7\x09\xc5\x10\xc6\x23\x88\x93\x98\xc4\xb7\x29\x89\xc7\x78\x86\xe3\x6c\x00\x24\x86\x38\x01\x7c\x87\xe3\x0c\xe8\x24\x9c\x4e\xdd\x56\x28\x5c\x64\x93\x24\x75\xf6\x41\x94\xcc\x97\x29\x19\x4f\x32\x98\x24\xd3\x11\x4e\x29\xdc\xb8\x42\x0c\x6f\xa6\x78\xbf\x55\xbc\x84\x68\x1a\x92\x59\x00\xa3\x70\x16\x8e\xb1\x9f\x95\x64\x13\x9c\x22\x37\x6c\x6f\x1d\xdc\x4f\xb0\xbb\xe5\xf6\x0b\x63\x08\xa3\x8c\x24\xb1\x73\x23\x4a\xe2\x2c\x0d\xa3\x2c\x80\x2c\x49\xb3\xe3\xd4\x7b\x42\x71\x00\x61\x4a\xa8\x0b\xc8\x6d\x9a\xcc\x02\xe4\xc2\x99\xdc\xba\x21\x24\x76\xf3\x62\xbc\x5f\xc5\x85\x1a\xce\xde\x48\x92\xfa\xeb\x05\xc5\xc7\x05\x61\x84\xc3\x29\x89\xc7\xd4\x4d\x76\x2e\x1e\x06\x0f\x10\x3a\xc7\x49\xa9\x0a\x63\x86\x3b\x56\x57\x68\x9f\x68\x3d\xa4\xc0\xeb\x19\xc9\xae\x9e\x01\xcb\xdf\x81\xb2\x1a\xc6\x6e\xee\x85\x27\x17\x9e\x5c\x78\xf2\x4b\xf3\xe4\x09\x1e\xae\xc1\x65\xd8\x58\x41\xd8\xda\x52\x69\x33\x80\xb0\xaa\xba\x32\x72\xb5\xc7\xf5\x96\x17\x03\x84\x52\x7e\xac\x16\x97\x67\x2e\xf7\x5a\xe3\xf2\x0b\x8c\x6a\x75\x97\x8d\x2b\x21\x99\xde\xc1\x5a\xe9\xda\x04\xbe\x44\x5d\xa6\x75\xa5\x8a\x7c\x19\x8a\x9c\xed\x4b\xd9\x55\xc6\xbe\x7a\x1c\x2b\x1a\xad\xb6\xc2\xe5\xa9\x2d\x99\xfd\x62\x3d\xb8\x49\xa8\xe6\xf6\x03\x42\x00\xf0\x57\x38\x37\xca\xa7\x6f\x67\x4d\xae\x0a\x0e\x75\x6b\x1c\x3f\x1c\xb6\xfc\x92\x8f\xea\x08\xed\x8b\x25\xd8\x17\x51\x25\x8c\xf5\xf0\xeb\xed\xe6\x0b\xac\x6f\x4a\x21\x4c\x5e\x31\x51\x73\x3d\x78\xde\x02\x21\xfb\x41\x38\x58\xd0\x68\x55\xb4\x39\x3f\x19\x81\x1e\x17\xf3\xf7\x19\x71\x80\xe6\x39\x69\x3b\x7c\x29\x5b\x72\x0d\x35\xb3\x5c\x0b\x56\x99\x53\x88\xfd\x7b\xb1\x25\x47\x7d\xd3\x3b\x7f\x62\x2e\xfc\x34\xb7\xaa\x64\xb5\x3f\x0e\xc6\x4a\x6d\x2a\x0e\x44\xe6\x03\x90\xea\xf4\xcc\xc7\x5b\x58\x83\x72\x25\xf7\xeb\x28\x6d\xa0\x66\x3b\x07\x9e\xd6\xec\x61\xc7\x65\xa1\xb4\xe1\x2e\x0f\x1a\xad\x6a\x65\x39\xec\xa3\x61\x0d\x14\x5c\x8b\x2d\x2f\x60\xad\x55\x8d\xce\x8f\x92\x03\xde\x4d\xc3\x73\x97\x34\xd0\x68\xe1\x52\x49\xbb\x74\x91\x3d\xe2\x79\x44\x11\xfa\x3c\xa3\x6e\x96\xbe\x3a\x9e\x16\xb6\x03\x84\xaf\x47\x72\xb3\xc8\x92\x94\xa2\x8e\x66\xfe\x81\xab\xf3\x13\xb6\xa0\xc3\x56\x0f\x4a\x3d\x82\x05\x07\x84\xa1\x13\xc2\x02\xbf\xe9\xd3\x69\xcf\xb0\xcc\xef\xd7\xc3\x19\x7a\x1e\x67\x29\x86\x11\xa1\x9e\x3d\x78\xf4\x05\x92\x9d\xbc\x44\xc9\x7d\x8c\xd3\x3d\xd1\x4e\x2e\x3e\x03\xb3\x11\x49\xb1\xe3\x11\x89\x4f\xbf\x22\x32\xc2\x71\x16\x4e\x03\x44\xe7\x38\x22\xe1\xd4\x21\x1c\xcf\xe6\xd3\x30\x5d\x06\xdd\x9a\x14\xff\x63\x81\xe3\x8c\x84\xd3\x23\x08\x5f\xff\x49\x44\xe6\x69\x12\x2d\x52\x4f\x62\x17\x06\xba\xb8\xa1\x19\xc9\x16\x19\x86\x71\x92\x8c\x7c\x9c\x29\x4e\xef\x48\x84\xe9\x47\x98\x26\xd4\x07\x6b\x41\x71\x80\x46\x61\x16\xfa\x8d\xe7\x69\x72\x4b\x32\xfa\xd1\xfd\xbe\x59\x50\xe2\x63\x46\xe2\x0c\xa7\xe9\x62\xee\xf0\x78\x05\x93\xe4\x1e\xdf\xe1\x14\xa2\x70\x41\xf1\xc8\x07\x37\x71\x14\x5e\xba\x63\x2c\x49\xfd\xd1\xf4\x3c\xa9\x4f\x70\xa6\x59\x4a\xa2\xac\x3f\xcc\x31\x36\x49\x33\x74\xf2\x11\x62\x3c\x9e\x92\x31\x8e\x23\x7c\xc6\xf1\xab\x23\xc7\x3d\xfc\x97\x70\x1f\x2e\xa1\x83\x79\x87\x69\xe4\x7f\xf6\x12\x36\xf0\x2f\x12\xc8\x2d\x84\xa3\x3b\xe2\xcc\xee\x06\xcf\x13\x4a\x49\x97\x26\x3e\x64\xd1\xa4\x0b\xf7\x63\x61\xf8\xbb\x2a\xd5\x70\xa3\x0a\x65\xb9\xdc\x3e\x07\xf9\xbf\xc1\x6f\xaa\x94\x70\xc3\xb4\x55\xf2\xd1\x97\xe8\x0f\x91\x84\x68\x2f\x09\xe1\x7b\x25\x21\x7a\x4e\x12\xc2\xb7\x49\x42\xf4\x55\x49\x08\x2f\x92\x84\xe8\x05\x92\x10\xbe\x2e\x09\xd1\xcb\x24\x21\x7c\x5d\x12\xa2\xff\x99\x24\x44\x8f\x24\x21\xfc\xbf\x25\x21\x7a\xca\xd6\x6f\x95\x84\xe8\xb1\x24\x84\x97\x48\x42\xf4\x32\x49\x08\x7f\x22\x09\xd1\xcb\x24\xe1\x17\x40\x73\x94\x84\xe8\x9b\x24\x21\x7c\x41\x12\xa2\xef\x92\x84\x70\xf6\x89\xd9\x47\x49\xcd\xac\x95\xc3\x8d\x7a\xa3\x5b\xc9\x1f\x44\x61\xcb\x6f\xf8\xd4\x7c\x0f\x4b\x66\xda\x52\x68\x05\x33\x66\x4d\x5b\x2b\xab\x2e\xdf\x9c\x97\x6f\xce\xcb\x37\xe7\x2f\xfd\xcd\xd9\xe7\x8b\xaa\xf8\xe7\xf6\xb3\x92\x9f\xd5\xd0\xb2\x55\xc5\x9d\xa0\xe7\xfa\x5c\xb3\x44\x5d\xdf\x6a\xb5\x83\xc4\x0d\x87\x4f\x6e\xfc\x05\x24\xbf\x32\x48\xd0\xcf\x50\x2a\x17\x90\xfc\x54\x90\xa0\xc7\x4a\x65\xa3\x9a\xcf\x9b\x81\x90\xc3\x56\xaf\xd9\x96\x0f\xf3\x4a\x0c\xb6\xef\x5e\xf0\xa7\xb5\xdf\xb8\xe6\xf5\x0e\x28\xe3\xf2\xdf\xf0\x17\x88\x7a\xfd\x8a\x0b\x56\x7e\x65\xac\x5c\xf4\xc9\xaf\x87\x95\x67\xf4\xc9\x81\x2b\x3b\x56\x57\x83\xed\xf5\x99\x1c\xb9\x7e\xfb\xee\xdd\x1b\x4f\x91\x88\x49\x25\x45\xce\x2a\x98\xda\x62\x80\x50\x47\x9c\x02\x5a\x59\x74\x2d\xd3\xb0\x61\x79\xc9\x0f\x2c\x0a\xe0\x8e\x6b\x9f\x82\xd7\x83\xb7\x5d\x99\x77\x8f\x5e\x5d\x7d\x44\x3b\xd5\xfa\x6e\xa9\x54\xd6\xf7\xd2\x7d\xde\x3a\x24\x00\xff\x23\xe7\x8d\x75\xf9\x99\xab\xba\xa9\x04\x93\x39\x3f\xb6\x6d\x0f\xab\x0f\xd0\xb2\x5b\x60\x4f\x21\xe8\xf7\x60\x8e\xa3\x80\x59\xdf\x2c\x87\xd2\xda\xe6\xc3\x70\xf8\xf0\xf0\x30\x60\xde\xca\x81\xd2\x9b\x61\x57\xdf\x66\xd8\xfd\x07\x86\x37\xd7\x83\xb7\x08\x2d\x64\xc5\x8d\x01\xcd\xff\xd5\x0a\xcd\x0b\xa7\xc4\x58\xd3\x54\x22\x77\x92\x0d\x2a\xf6\xe0\x8a\x85\x6d\x34\xdf\x17\xaf\x90\xbe\x31\x2b\xe4\x26\x38\x82\xaf\xd7\x49\xe9\x07\xe8\x60\x95\x30\xd0\x1f\xe0\xbb\xd6\x87\xf2\x81\x9b\x90\x12\x1a\xa0\x47\x45\x44\x70\x97\x91\xf1\x88\xb8\x37\x4f\xcf\x8b\xaa\x6b\x5c\xf3\x3f\x1a\xed\x6c\x57\x1a\x84\x0b\x1d\x2f\x06\x88\x72\x7e\xb6\xf9\xba\x6b\x62\x1f\x9b\xcb\x15\x93\x9b\x96\x6d\x38\x6c\xd4\x96\x6b\xcf\xf3\x13\x3f\x7c\x0b\x1e\x9d\x98\x6a\x9e\xba\x33\xf0\x48\x3a\xd1\x6a\xcf\xf5\x07\xae\xb9\xc7\xc8\x3e\x4a\x63\xe5\x1b\xdd\x10\x75\x8f\xd5\x1a\x2a\xb1\x72\x29\xd7\x91\xb3\x6c\x0d\x72\x6c\x34\x56\x78\xb1\xb3\xe5\x5d\xec\x6d\xc9\x85\x06\xa5\xc5\x46\x48\x56\xf5\xa0\xe7\xa6\x75\x6f\x70\xff\x27\x11\x60\x8d\xc8\x07\x1b\xe5\x7f\x73\xff\xb7\x15\x7d\xbc\x6e\x98\x36\xbd\x4b\xcd\x59\xd1\xbb\x34\x39\x93\xb2\x77\xbd\x57\xe6\xc7\x4b\x67\x67\xd9\xbf\x68\xb4\xd8\x32\xcb\xfd\xbd\x27\x67\xee\xdb\xf7\xf0\x49\x68\xe7\x06\x15\xb5\x92\x6a\xfb\x63\x8f\x59\x50\x6b\xf4\xe3\x8e\x59\x27\x2f\x7f\xd8\x31\x0b\x56\xa1\x1f\x73\xcc\x76\x72\x17\xfd\x77\xc7\xec\xe3\x3e\x23\xba\x1c\xb3\x97\x63\xf6\xe7\x1c\xb3\xff\x09\x00\x00\xff\xff\x31\x48\xf0\x71\x30\x27\x00\x00")

func tmpLicensesBytes() ([]byte, error) {
	return bindataRead(
		_tmpLicenses,
		"tmp/LICENSES",
	)
}

func tmpLicenses() (*asset, error) {
	bytes, err := tmpLicensesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/LICENSES", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVersion = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\x2c\x2e\x49\x2d\xe2\x02\x04\x00\x00\xff\xff\xd1\x78\x4a\x5d\x07\x00\x00\x00")

func tmpVersionBytes() ([]byte, error) {
	return bindataRead(
		_tmpVersion,
		"tmp/version",
	)
}

func tmpVersion() (*asset, error) {
	bytes, err := tmpVersionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/version", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/LICENSES": tmpLicenses,
	"tmp/version": tmpVersion,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"LICENSES": &bintree{tmpLicenses, map[string]*bintree{}},
		"version": &bintree{tmpVersion, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

