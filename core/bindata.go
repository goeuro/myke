// Code generated by go-bindata.
// sources:
// tmp/LICENSES
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpLicenses = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x4d\x73\xdb\x38\xd2\xc7\xef\xf8\x14\x5d\x39\x3c\x15\x3f\xc5\x48\x8e\x67\x6a\x0e\x93\x13\x4d\xc1\x12\x26\x32\xa9\x25\x28\x7b\x75\x84\x48\x48\xc4\x84\x04\xb8\x00\x28\x8f\xf6\xd3\x6f\x01\xa2\x24\xda\x56\x76\xc6\x8e\x77\x53\xb5\xd1\xc9\x7c\xc1\x4b\xa3\xd9\xfd\xc3\x1f\x6d\x25\x33\x1c\x03\x4d\xe6\x69\x84\x61\x4a\x22\x1c\x53\x4c\x11\x5a\x0b\x5b\xb6\xcb\x41\xae\xea\xe1\x5a\xf1\x56\xab\x61\xbd\xfd\xc2\x11\x42\xb7\x24\x83\xa9\xc8\xb9\x34\x1c\xa1\x48\x35\x5b\x2d\xd6\xa5\x85\xf7\xf9\x05\x5c\x5d\x7e\xfc\x05\xc6\x0a\xb7\x5a\x41\xa6\xd9\x86\x57\x30\xae\x97\x13\x84\x66\x5c\xd7\xc2\x18\xa1\x24\x08\x03\x25\xd7\x7c\xb9\x85\xb5\x66\xd2\xf2\x22\x80\x95\xe6\x1c\xd4\x0a\xf2\x92\xe9\x35\x0f\xc0\x2a\x60\x72\x0b\x0d\xd7\x46\x49\x50\x4b\xcb\x84\x14\x72\x0d\x0c\x72\xd5\x6c\x91\x5a\x81\x2d\x85\x01\xa3\x56\xf6\x81\x69\x0e\x4c\x16\xc0\x8c\x51\xb9\x60\x96\x17\x50\xa8\xbc\xad\xb9\xb4\xcc\xba\xf9\x56\xa2\xe2\x06\xde\xdb\x92\xc3\x3b\xda\xf5\x78\x77\xe1\x27\x29\x38\xab\x90\x90\xe0\xde\xed\x5f\xc1\x83\xb0\xa5\x6a\x2d\x68\x6e\xac\x16\xb9\x1b\x23\x00\x21\xf3\xaa\x2d\x9c\x0d\xfb\xd7\x95\xa8\x45\x37\x83\xeb\xee\x7d\x60\x90\x55\xd0\x1a\x1e\x78\x3b\x03\xa8\x55\x21\x56\xee\x2f\xf7\xcb\x6a\xda\x65\x25\x4c\x19\x40\x21\xdc\xd0\xcb\xd6\xf2\x00\x8c\x7b\xe8\x9d\x19\xb8\x75\x0c\x95\x06\xc3\xab\x0a\xe5\xaa\x11\xdc\x80\x5f\xeb\xd1\x3a\xdf\xc6\x99\xde\x38\x87\xda\xce\x45\xc6\x3d\x79\x28\x55\xfd\x78\x25\xc2\xa0\x55\xab\xa5\x30\x25\xf7\x7d\x0a\x05\x46\xf9\x19\x7f\xe7\xb9\x75\x4f\x5c\xf3\x95\xaa\x2a\xf5\xe0\x96\x96\x2b\x59\x08\xb7\x22\xf3\x2b\x42\x59\xc9\x81\x2d\xd5\x86\xfb\xb5\xec\x3e\xb1\x54\x56\xe4\x3b\x77\xfb\x0f\xd0\x1c\xbf\x6a\xf7\xca\x94\xac\xaa\x60\xc9\x3b\x87\xf1\x02\x84\x04\xd6\x5b\x8e\x76\xd3\x1b\xcb\xa4\x15\xac\x82\x46\x69\x3f\xdf\xd3\x65\x0e\x10\xca\x26\x18\x68\x72\x93\xdd\x87\x29\x06\x42\x61\x96\x26\x77\x64\x84\x47\xf0\x2e\xa4\x40\xe8\xbb\x00\xee\x49\x36\x49\xe6\x19\xdc\x87\x69\x1a\xc6\xd9\x02\x92\x1b\x08\xe3\x05\x7c\x26\xf1\x28\x00\xfc\xf7\x59\x8a\x29\x85\x24\x45\xe4\x76\x36\x25\x78\x14\x00\x89\xa3\xe9\x7c\x44\xe2\x31\x5c\xcf\x33\x88\x93\x0c\xa6\xe4\x96\x64\x78\x04\x59\x02\x6e\xc2\x6e\x28\x82\xa9\x1b\xec\x16\xa7\xd1\x24\x8c\xb3\xf0\x9a\x4c\x49\xb6\x08\xd0\x0d\xc9\x62\x37\xe6\x4d\x92\x42\x08\xb3\x30\xcd\x48\x34\x9f\x86\x29\xcc\xe6\xe9\x2c\xa1\x18\xc2\x78\x04\x71\x12\x93\xf8\x26\x25\xf1\x18\xdf\xe2\x38\x1b\x00\x89\x21\x4e\x00\xdf\xe1\x38\x03\x3a\x09\xa7\x53\x37\x15\x0a\xe7\xd9\x24\x49\x9d\x7d\x10\x25\xb3\x45\x4a\xc6\x93\x0c\x26\xc9\x74\x84\x53\x0a\xd7\x2e\x11\xc3\xeb\x29\xde\x4d\x15\x2f\x20\x9a\x86\xe4\x36\x80\x51\x78\x1b\x8e\xb1\xef\x95\x64\x13\x9c\x22\xd7\x6c\x67\x1d\xdc\x4f\xb0\x7b\xe4\xe6\x0b\x63\x08\xa3\x8c\x24\xb1\x5b\x46\x94\xc4\x59\x1a\x46\x59\x00\x59\x92\x66\x87\xae\xf7\x84\xe2\x00\xc2\x94\x50\xe7\x90\x9b\x34\xb9\x0d\x90\x73\x67\x72\xe3\x9a\x90\xd8\xf5\x8b\xf1\x6e\x14\xe7\x6a\x78\xf4\x45\x92\xd4\xdf\xcf\x29\x3e\x0c\x08\x23\x1c\x4e\x49\x3c\xa6\xae\xb3\x5b\xe2\xbe\xf1\x00\xa1\x47\x38\x59\x55\xca\xe4\xe5\xb0\x51\x72\xad\xae\xd0\x2e\xd4\x7a\x50\x81\xf7\xb7\x24\xbb\x38\x81\x96\x9f\x3e\x5c\x5d\x7e\xfc\x19\x6e\x2a\xa5\x05\x93\x40\xf3\xb2\x62\x79\x69\xb9\x7e\x5b\xbe\x80\x5a\xa1\xb7\xe3\x0b\x08\x89\xde\x8c\x2f\x60\x15\x7a\x1b\xbe\xc0\x81\x2f\xe8\x1b\xf8\x02\x27\xf8\x82\xce\x7c\x79\x25\x5f\xa0\xe3\x0b\x7a\x03\xbe\xc0\x91\x2f\xe8\x1b\xf8\x02\xcf\xf9\x82\x5e\xcf\x17\xe8\xf3\x05\x7d\x2b\x5f\xe0\x6b\x7c\x59\x97\xaa\x30\x66\xb8\x65\x75\xf5\x02\xba\xfc\x0c\x94\xd5\x30\x76\x7d\xcf\x7a\xe5\xac\x57\xfe\x07\x78\x72\xd6\x2b\xaf\xd7\x2b\xcf\xf0\x70\x05\x2e\xc2\xc6\x0a\xc2\xd6\x96\x4a\x9b\x01\x84\x55\xb5\xdf\x96\x35\x37\x5c\x6f\x78\x31\x40\x28\xe5\x87\x6c\x71\x71\xe6\x62\xaf\x35\x2e\xbe\xc0\xa8\x56\x77\xd1\xb8\x14\x92\xe9\x2d\xac\x94\xae\x4d\xe0\x53\xd4\x45\x5a\x97\xaa\xc8\xa7\xa1\xc8\xd9\x2e\x95\x5d\x66\xec\xb2\xc7\xb1\xa2\xd1\x6a\x23\x5c\x9c\xda\x92\xd9\xaf\xe6\x83\xeb\x84\x6a\x6e\x7f\x45\x08\x00\xfe\x1f\x1e\x1b\xe5\xc3\xb7\xb3\x26\x57\x05\x87\xba\x35\x8e\x1f\x0e\x5b\x7e\xc8\x27\x79\x84\x76\xc9\x12\xec\x92\xa8\x12\xc6\x7a\xf8\xf5\x66\xf3\x09\xd6\x37\xa5\x10\x26\xaf\x98\xa8\xb9\x1e\x9c\xb6\x40\xc8\xbe\x13\xf6\x16\x34\x5a\x15\x6d\xce\x8f\x46\xa0\xa7\xc9\xfc\x3a\x23\xf6\xd0\x7c\x4c\xda\x0e\x5f\xca\x96\x5c\x43\xcd\x2c\xd7\x82\x55\xe6\xe8\x62\xff\x5d\x6c\xc9\x51\xdf\xf4\x6e\x3d\x31\x17\xbe\x9b\x1b\x55\xb2\xda\x6f\x07\x63\xa5\xd6\x15\x07\x22\xf3\x01\x48\x75\x7c\xe7\xfd\x2d\xac\x41\xb9\x92\xbb\x71\x94\x36\x50\xb3\xad\x03\x4f\x6b\x76\xb0\xe3\xb2\x50\xda\x70\x17\x07\x8d\x56\xb5\xb2\x1c\x76\xde\xb0\x06\x0a\xae\xc5\x86\x17\xb0\xd2\xaa\x7e\x22\x4d\xf7\x78\x37\x0d\xcf\x5d\xd0\x40\xa3\x85\x0b\x25\xed\xc2\x45\xf6\x88\xe7\x11\x45\xe8\x69\x46\x5d\x2f\x7c\x76\x3c\x4f\x6c\x07\x08\x9f\x8f\xe4\x7a\x9e\x25\x29\x45\x1d\xcd\xfc\x0b\x97\xe7\x47\x6c\x41\x87\xad\x1e\x94\x7a\x04\x0b\xf6\x08\x43\x47\x84\x05\x7e\xd2\xe7\xdd\x4e\xb0\xcc\xcf\xd7\xc3\x19\x3a\x8d\xb3\x14\xc3\x88\x50\xcf\x1e\x3c\xfa\x9a\x32\x3a\xac\x12\x25\xf7\x31\x4e\x77\x44\x3b\x2e\xf1\x04\xcc\x46\x24\xc5\x8e\x47\x24\x3e\x5e\x45\x64\x84\xe3\x2c\x9c\x06\x88\xce\x70\x44\xc2\xa9\x43\x38\xbe\x9d\x4d\xc3\x74\x11\x74\x63\x52\xfc\xb7\x39\x8e\x33\x12\x4e\x0f\x20\x7c\xff\x27\x1e\x99\xa5\x49\x34\x4f\x3d\x89\x9d\x1b\xe8\xfc\x9a\x66\x24\x9b\x67\x18\xc6\x49\x32\xf2\x7e\xa6\x38\xbd\x23\x11\xa6\x9f\x60\x9a\x50\xef\xac\x39\xc5\x01\x1a\x85\x59\xe8\x27\x9e\xa5\xc9\x0d\xc9\xe8\x27\x77\x7d\x3d\xa7\xc4\xfb\x8c\xc4\x19\x4e\xd3\xf9\xcc\xe1\xf1\x02\x26\xc9\x3d\xbe\xc3\x29\x44\xe1\x9c\xe2\x91\x77\x6e\xe2\x28\xbc\x70\xdb\x58\x92\xfa\xad\xe9\x34\xa9\x8f\x70\xa6\x59\x4a\xa2\xac\xdf\xcc\x31\x36\x49\x33\x74\x5c\x23\xc4\x78\x3c\x25\x63\x1c\x47\xf8\x11\xc7\x2f\x0e\x1c\xf7\xf0\x5f\xc0\x7d\xb8\xd8\x8b\xc3\x0e\xd3\xc8\x5f\xf6\x02\x36\xf0\x1f\x12\xc8\x0d\x84\xa3\x3b\xe2\xcc\xee\x1a\xcf\x12\x4a\x49\x17\x26\xde\x65\xd1\xa4\x73\xf7\x53\x61\xf8\xbb\x2a\xd5\x70\xad\x0a\x65\xb9\xdc\x9c\x82\xfc\x4f\xf0\x9b\x2a\x25\x5c\x33\x6d\x95\x7c\x52\xe9\x7a\x13\x49\x88\x0e\x47\xcc\xd7\x49\x42\xf4\x95\x23\xe6\x4b\x24\x21\xfa\xb3\x23\xe6\x5f\x90\x84\xe8\x45\x47\xcc\x93\x92\x10\xbd\xfe\x88\xd9\x93\x84\xe8\x3f\x26\x09\xd1\x13\x49\x08\xff\x6d\x49\x88\x9e\xb3\xf5\xa5\x92\x10\x7d\xed\x88\xf9\x6f\x25\x21\x7a\xf1\x11\xf3\xa4\x24\x44\xaf\x3e\x62\x3e\x92\x84\xe8\xf5\x47\xcc\x9e\x24\x44\x6f\x70\xc4\xec\xa3\xa4\x66\xd6\xca\xe1\x5a\x7d\xd0\xad\xe4\x0f\xa2\xb0\xe5\x0b\x8e\x9a\xbf\xc0\x82\x99\xb6\x14\x5a\xc1\x2d\xb3\xa6\xad\x95\x55\xe7\x33\xe7\xf9\xcc\x79\x3e\x73\xfe\xd0\x67\xce\x3e\x5f\x54\xc5\xbf\xb4\x5f\x94\xfc\xa2\x86\x96\x2d\x2b\xee\x04\x3d\xd7\x8f\x35\x4b\xd4\xd5\xad\x96\x5b\x48\x5c\x73\xf8\xec\xda\x9f\x41\xf2\x23\x83\x04\x7d\x0f\xa5\x72\x06\xc9\x77\x05\x09\x7a\xaa\x54\xd6\xaa\xf9\xb2\x1e\x08\x39\x6c\xf5\x8a\x6d\xf8\x30\xaf\xc4\x60\xf3\xf1\x2f\xfc\xeb\xfe\x37\xae\x79\xbd\x05\xca\xb8\xfc\x27\xfc\x1f\x44\xbd\x7a\xc5\x19\x2b\x3f\x32\x56\xce\xfa\xe4\xc7\xc3\xca\x09\x7d\xb2\xe7\xca\x96\xd5\xd5\x60\x73\xf5\x48\x8e\x5c\x5d\x7e\xfc\xf8\xc1\x53\x24\x62\x52\x49\x91\xb3\x0a\xa6\xb6\x18\x20\xd4\x11\xa7\x80\x56\x16\x5d\xc9\x34\x6c\x58\x5e\xf2\x3d\x8b\x02\xb8\xe3\xda\x87\xe0\xd5\xe0\xb2\x4b\xf3\xee\xd5\xbb\x8b\x4f\x68\xab\x5a\x5f\x2d\x95\xca\xfa\x5a\xba\x8f\x5b\x87\x04\xe0\x7f\xe4\xbc\xb1\x2e\x3e\x73\x55\x37\x95\x60\x32\xe7\x87\xb2\xed\x7e\xf4\x01\x5a\x74\x03\xec\x28\x04\xfd\x1a\xcc\xa1\x15\x30\xeb\x8b\xe5\x50\x5a\xdb\xfc\x3a\x1c\x3e\x3c\x3c\x0c\x98\xb7\x72\xa0\xf4\x7a\xd8\xe5\xb7\x19\x76\x3f\x90\xfa\x70\x35\xb8\x44\x68\x2e\x2b\x6e\x0c\x68\xfe\x8f\x56\x68\x5e\x38\x25\xc6\x9a\xa6\x12\xb9\x93\x6c\x50\xb1\x07\x97\x2c\x6c\xad\xf9\x2e\x79\x85\xf4\x85\x59\x21\xd7\xc1\x01\x7c\xbd\x4a\x4a\xdf\x41\x7b\xab\x84\x81\x7e\x03\x5f\xb5\xde\xa7\x0f\x5c\x87\x94\xd0\x00\x3d\x49\x22\x82\xbb\x88\x8c\x47\xc4\x7d\x79\xfa\x38\xa9\xba\xc2\x35\xff\xa3\xd1\xce\x76\xa5\x41\x38\xd7\xf1\x62\x80\x28\xe7\x8f\x26\x5f\x75\x45\xec\x43\x71\xb9\x62\x72\xdd\xb2\x35\x87\xb5\xda\x70\xed\x79\x7e\xe4\x87\x2f\xc1\xa3\x23\x53\xcd\xf3\xe5\x0c\x3c\x92\x8e\xb4\xda\x71\xfd\x81\x6b\xee\x31\xb2\xf3\xd2\x58\xf9\x42\x37\x44\xdd\x6b\xb5\x82\x4a\x2c\x5d\xc8\x75\xe4\x2c\x5b\x83\x1c\x1b\x8d\x15\x5e\xec\x6c\x78\xe7\x7b\x5b\x72\xa1\x41\x69\xb1\x16\x92\x55\x3d\xe8\xb9\x6e\xdd\x17\xdc\xfd\x4b\x04\x58\x23\xf2\xc1\x5a\xf9\x6b\xee\xff\xb7\xa2\x0f\xf7\x0d\xd3\xa6\x77\xab\x39\x2b\x7a\xb7\x26\x67\x52\xf6\xee\x77\xca\xfc\x70\xeb\xec\x2c\xfb\x37\x8d\x16\x1b\x66\xb9\x7f\xf6\x6c\xcf\xbd\xfc\x05\x3e\x0b\xed\x96\x41\x45\xad\xa4\xda\x9c\x7f\xca\xf2\xda\x9f\xb2\xa0\x6f\xdb\x66\x9f\xd6\x19\xd1\x79\x9b\x3d\x6f\xb3\xdf\x67\x9b\xfd\x57\x00\x00\x00\xff\xff\x35\xd6\xb4\xd5\x90\x2b\x00\x00")

func tmpLicensesBytes() ([]byte, error) {
	return bindataRead(
		_tmpLicenses,
		"tmp/LICENSES",
	)
}

func tmpLicenses() (*asset, error) {
	bytes, err := tmpLicensesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/LICENSES", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/LICENSES": tmpLicenses,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"LICENSES": &bintree{tmpLicenses, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

