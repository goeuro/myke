// Code generated by go-bindata.
// sources:
// tmp/LICENSES
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpLicenses = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\x5f\x77\xda\x3a\x12\xc0\xdf\xf5\x29\xe6\xf4\x61\x4f\xb3\xc7\x85\x34\xf7\x9e\x3e\xb4\x4f\x8e\x51\x40\x2d\xb1\x59\xdb\x24\xcb\xa3\xb0\x05\x56\x63\x4b\x5e\x49\x86\xcb\x7e\xfa\x3d\x12\x06\x4c\x42\xf7\xde\xa4\xd9\xed\x39\x2d\x4f\x60\x5b\x7f\x66\xc6\x33\x3f\xcf\x78\x1c\x4d\x70\x08\x49\x34\x8d\x03\x0c\x63\x12\xe0\x30\xc1\x09\x42\x4b\x6e\x8a\x66\xde\xcb\x64\xd5\x5f\x4a\xd6\x28\xd9\xaf\x36\x0f\x0c\x21\x74\x4b\x52\x18\xf3\x8c\x09\xcd\x10\x0a\x64\xbd\x51\x7c\x59\x18\x78\x9b\x5d\xc0\xd5\xe5\xfb\x0f\x30\x94\xb8\x51\x12\x52\x45\x57\xac\x84\x61\x35\x1f\x21\x34\x61\xaa\xe2\x5a\x73\x29\x80\x6b\x28\x98\x62\xf3\x0d\x2c\x15\x15\x86\xe5\x1e\x2c\x14\x63\x20\x17\x90\x15\x54\x2d\x99\x07\x46\x02\x15\x1b\xa8\x99\xd2\x52\x80\x9c\x1b\xca\x05\x17\x4b\xa0\x90\xc9\x7a\x83\xe4\x02\x4c\xc1\x35\x68\xb9\x30\x6b\xaa\x18\x50\x91\x03\xd5\x5a\x66\x9c\x1a\x96\x43\x2e\xb3\xa6\x62\xc2\x50\x63\xf7\x5b\xf0\x92\x69\x78\x6b\x0a\x06\x6f\x92\x76\xc6\x9b\x0b\xb7\x49\xce\x68\x89\xb8\x00\x7b\x6d\x77\x09\xd6\xdc\x14\xb2\x31\xa0\x98\x36\x8a\x67\x76\x0d\x0f\xb8\xc8\xca\x26\xb7\x32\xec\x2e\x97\xbc\xe2\xed\x0e\x76\xba\xb3\x81\x46\x46\x42\xa3\x99\xe7\xe4\xf4\xa0\x92\x39\x5f\xd8\x5f\xe6\xd4\xaa\x9b\x79\xc9\x75\xe1\x41\xce\xed\xd2\xf3\xc6\x30\x0f\xb4\x3d\xe9\x8c\xe9\x59\x3d\xfa\x52\x81\x66\x65\x89\x32\x59\x73\xa6\xc1\xe9\x7a\x90\xce\x8d\xb1\xa2\xd7\xd6\xa0\xa6\x35\x91\xb6\x67\xd6\x85\xac\x8e\x35\xe1\x1a\x2d\x1a\x25\xb8\x2e\x98\x9b\x93\x4b\xd0\xd2\xed\xf8\x95\x65\xc6\x9e\xb1\xc3\x17\xb2\x2c\xe5\xda\xaa\x96\x49\x91\x73\xab\x91\xfe\x88\x50\x5a\x30\xa0\x73\xb9\x62\x4e\x97\xed\x2d\x16\xd2\xf0\x6c\x6b\x6e\x77\x03\xea\xc3\x5d\x6d\x2f\xe9\x82\x96\x25\xcc\x59\x6b\x30\x96\x03\x17\x40\x3b\xea\x28\xbb\xbd\x36\x54\x18\x4e\x4b\xa8\xa5\x72\xfb\x3d\x56\xb3\x87\x50\x3a\xc2\x90\x44\x37\xe9\xbd\x1f\x63\x20\x09\x4c\xe2\xe8\x8e\x0c\xf0\x00\xde\xf8\x09\x90\xe4\x8d\x07\xf7\x24\x1d\x45\xd3\x14\xee\xfd\x38\xf6\xc3\x74\x06\xd1\x0d\xf8\xe1\x0c\xbe\x90\x70\xe0\x01\xfe\xe7\x24\xc6\x49\x02\x51\x8c\xc8\xed\x64\x4c\xf0\xc0\x03\x12\x06\xe3\xe9\x80\x84\x43\xb8\x9e\xa6\x10\x46\x29\x8c\xc9\x2d\x49\xf1\x00\xd2\x08\xec\x86\xed\x52\x04\x27\x76\xb1\x5b\x1c\x07\x23\x3f\x4c\xfd\x6b\x32\x26\xe9\xcc\x43\x37\x24\x0d\xed\x9a\x37\x51\x0c\x3e\x4c\xfc\x38\x25\xc1\x74\xec\xc7\x30\x99\xc6\x93\x28\xc1\xe0\x87\x03\x08\xa3\x90\x84\x37\x31\x09\x87\xf8\x16\x87\x69\x0f\x48\x08\x61\x04\xf8\x0e\x87\x29\x24\x23\x7f\x3c\xb6\x5b\x21\x7f\x9a\x8e\xa2\xd8\xca\x07\x41\x34\x99\xc5\x64\x38\x4a\x61\x14\x8d\x07\x38\x4e\xe0\xda\x06\xa2\x7f\x3d\xc6\xdb\xad\xc2\x19\x04\x63\x9f\xdc\x7a\x30\xf0\x6f\xfd\x21\x76\xb3\xa2\x74\x84\x63\x64\x87\x6d\xa5\x83\xfb\x11\xb6\xa7\xec\x7e\x7e\x08\x7e\x90\x92\x28\xb4\x6a\x04\x51\x98\xc6\x7e\x90\x7a\x90\x46\x71\xba\x9f\x7a\x4f\x12\xec\x81\x1f\x93\xc4\x1a\xe4\x26\x8e\x6e\x3d\x64\xcd\x19\xdd\xd8\x21\x24\xb4\xf3\x42\xbc\x5d\xc5\x9a\x1a\x8e\xee\x48\x14\xbb\xe3\x69\x82\xf7\x0b\xc2\x00\xfb\x63\x12\x0e\x13\x3b\xd9\xaa\xb8\x1b\xdc\x43\xe8\x08\x27\x8b\x52\xea\xac\xe8\xd7\x52\x2c\xe5\x15\xda\xba\x5a\x07\x2a\xf0\xf6\x96\xa4\x17\x27\xd0\xf2\xdb\xbb\xab\xcb\xf7\xbf\xc3\x4d\x29\x15\xa7\x02\x92\xac\x28\x69\x56\x18\xa6\x5e\x97\x2f\x20\x17\xe8\xf5\xf8\x02\x5c\xa0\x57\xe3\x0b\x18\x89\x5e\x87\x2f\xb0\xe7\x0b\xfa\x0e\xbe\xc0\x09\xbe\xa0\x33\x5f\x5e\xc8\x17\x68\xf9\x82\x5e\x81\x2f\x70\xe0\x0b\xfa\x0e\xbe\xc0\x53\xbe\xa0\x97\xf3\x05\xba\x7c\x41\xdf\xcb\x17\xf8\x16\x5f\x96\x85\xcc\xb5\xee\x6f\x68\x55\x3e\x83\x2e\xbf\x43\x42\x2b\x18\xda\xb9\xe7\x7c\xe5\x9c\xaf\xfc\x04\x3c\x39\xe7\x2b\x2f\xcf\x57\x9e\xe0\xe1\x0a\xac\x87\x0d\x25\xf8\x8d\x29\xa4\xd2\x3d\xf0\xcb\x72\xf7\x58\x56\x4c\x33\xb5\x62\x79\x0f\xa1\x98\xed\xa3\xc5\xfa\x99\xf5\xbd\x46\x5b\xff\x02\x2d\x1b\xd5\x7a\xe3\x9c\x0b\xaa\x36\xb0\x90\xaa\xd2\x9e\x0b\x51\xeb\x69\x6d\xa8\x22\x17\x86\x3c\xa3\xdb\x50\xb6\x91\xb1\x8d\x1e\xcb\x8a\x5a\xc9\x15\xb7\x7e\x6a\x0a\x6a\xbe\x19\x0f\x76\x12\xaa\x98\xf9\x88\x10\x00\xfc\x1d\x8e\x85\x72\xee\xdb\x4a\x93\xc9\x9c\x41\xd5\x68\xcb\x0f\x8b\x2d\xb7\xe4\xa3\x38\x42\xdb\x60\xf1\xb6\x41\x54\x72\x6d\x1c\xfc\x3a\xbb\xb9\x00\xeb\x8a\x92\x73\x9d\x95\x94\x57\x4c\xf5\x4e\x4b\xc0\x45\xd7\x08\x3b\x09\x6a\x25\xf3\x26\x63\x07\x21\xd0\xe3\x60\x7e\x99\x10\x3b\x68\x1e\x93\xb6\xc5\x97\x34\x05\x53\x50\x51\xc3\x14\xa7\xa5\x3e\x98\xd8\xdd\x17\x53\x30\xd4\x15\xbd\xd5\x27\x64\xdc\x4d\xb3\xab\x0a\x5a\xb9\xc7\xc1\x50\xca\x65\xc9\x80\x88\xac\x07\x42\x1e\xae\x39\x7b\x73\xa3\x51\x26\xc5\x76\x1d\xa9\x34\x54\x74\x63\xc1\xd3\xe8\x2d\xec\x98\xc8\xa5\xd2\xcc\xfa\x41\xad\x64\x25\x0d\x83\xad\x35\x8c\x86\x9c\x29\xbe\x62\x39\x2c\x94\xac\x1e\xa5\xa6\x3b\xbc\xeb\x9a\x65\xd6\x69\xa0\x56\xdc\xba\x92\xb2\xee\x22\x3a\xc4\x73\x88\x22\xc9\x69\x46\x5d\xcf\x5c\x74\x3c\x0d\x6c\x0b\x08\x17\x8f\xe4\x7a\x9a\x46\x71\x82\x5a\x9a\xb9\x0b\x36\xce\x0f\xd8\x82\x16\x5b\x1d\x28\x75\x08\xe6\xed\x10\x86\x0e\x08\xf3\xdc\xa6\x4f\xa7\x9d\x60\x99\xdb\xaf\x83\x33\x74\x1a\x67\x31\x86\x01\x49\x1c\x7b\xf0\xe0\x5b\x99\xd1\x5e\x4b\x14\xdd\x87\x38\xde\x12\xed\xa0\xe2\x09\x98\x0d\x48\x8c\x2d\x8f\x48\x78\xf8\x17\x90\x01\x0e\x53\x7f\xec\xa1\x64\x82\x03\xe2\x8f\x2d\xc2\xf1\xed\x64\xec\xc7\x33\xaf\x5d\x33\xc1\xff\x98\xe2\x30\x25\xfe\x78\x0f\xc2\xb7\x7f\x62\x91\x49\x1c\x05\xd3\xd8\x91\xd8\x9a\x21\x99\x5e\x27\x29\x49\xa7\x29\x86\x61\x14\x0d\x9c\x9d\x13\x1c\xdf\x91\x00\x27\x9f\x60\x1c\x25\xce\x58\xd3\x04\x7b\x68\xe0\xa7\xbe\xdb\x78\x12\x47\x37\x24\x4d\x3e\xd9\xff\xd7\xd3\x84\x38\x9b\x91\x30\xc5\x71\x3c\x9d\x58\x3c\x5e\xc0\x28\xba\xc7\x77\x38\x86\xc0\x9f\x26\x78\xe0\x8c\x1b\x59\x0a\xcf\xec\x63\x2c\x8a\xdd\xa3\xe9\x34\xa9\x0f\x70\x4e\xd2\x98\x04\x69\x77\x98\x65\x6c\x14\xa7\xe8\xa0\x23\x84\x78\x38\x26\x43\x1c\x06\xf8\x88\xe3\x17\x7b\x8e\x3b\xf8\xcf\xe0\xde\x9f\xed\x92\xc3\x16\xd3\xc8\xfd\xed\x38\xac\xe7\x6e\x24\x90\x1b\xf0\x07\x77\xc4\x8a\xdd\x0e\x9e\x44\x49\x42\x5a\x37\x71\x26\x0b\x46\xad\xb9\x1f\x27\x86\x5f\x65\x21\xfb\x4b\x99\x4b\xc3\xc4\xea\x14\xe4\x7f\x83\xcf\xb2\x10\x70\x4d\x95\x91\xe2\xd1\x9b\xae\x57\x49\x09\xd1\xbe\xc4\x7c\x59\x4a\x88\xbe\x51\x62\x3e\x27\x25\x44\x7f\x56\x62\xfe\x85\x94\x10\x3d\xab\xc4\x3c\x99\x12\xa2\x97\x97\x98\x9d\x94\x10\xfd\xcf\x52\x42\xf4\x28\x25\x84\xff\x77\x4a\x88\x9e\xb2\xf5\xb9\x29\x21\xfa\x56\x89\xf9\x5f\x53\x42\xf4\xec\x12\xf3\x64\x4a\x88\x5e\x5c\x62\x1e\xa5\x84\xe8\xe5\x25\x66\x27\x25\x44\xaf\x50\x62\x76\x51\x52\x51\x63\x44\x7f\x29\xdf\xa9\x46\xb0\x35\xcf\x4d\xf1\x8c\x52\xf3\x03\xcc\xa8\x6e\x0a\xae\x24\xdc\x52\xa3\x9b\x4a\x1a\x79\xae\x39\xcf\x35\xe7\xb9\xe6\xfc\xa5\x6b\xce\x2e\x5f\x64\xc9\x1e\x9a\x07\x29\x1e\x64\xdf\xd0\x79\xc9\x6c\x42\xcf\xd4\x71\xce\x12\xb4\xef\xad\xe6\x1b\x88\xec\x70\xf8\x62\xc7\x9f\x41\xf2\x2b\x83\x04\xfd\x88\x4c\xe5\x0c\x92\x1f\x0a\x12\xf4\x38\x53\xe9\x70\xc4\xf0\x7c\x4d\xcb\xb2\xbf\xfc\xaa\x6d\x45\xf3\x8c\x14\xe5\xb3\xd4\x05\x5c\xd3\x87\x73\x7b\xed\xdc\x5e\xfb\x29\x52\x93\x73\x7b\xed\x75\xda\x6b\x3b\xa4\x54\xd4\x64\xcf\xab\x7a\xce\x48\x39\x23\xe5\x8c\x94\x33\x52\x5a\xa4\xc8\xfa\x61\xd9\xe3\xa2\xdf\xa8\x05\x5d\xb1\x7e\x56\xf2\xde\xea\xfd\x5f\xf8\xc0\xf0\x33\x53\xac\xda\x40\x42\x99\xf8\x37\xfc\x0d\x82\x4e\x57\xe5\x5c\xfc\xfc\xca\xc5\xcf\x4f\xc3\x95\x73\xf1\xf3\x3d\x6f\x51\x76\x5c\xd9\xd0\xaa\xec\xad\xae\x8e\x5e\x9a\x5c\x5d\xbe\x7f\xff\xce\x51\x24\xa0\x42\x0a\x9e\xd1\x12\xc6\x26\xef\x21\xd4\x12\x27\x87\x46\xe4\x6d\x63\xd7\xaf\x69\x56\xb0\x1d\x8b\x3c\xb8\x63\xca\xb9\xe0\x55\xef\xb2\x0d\xf3\xf6\xd2\x9b\x8b\x4f\x68\x23\x1b\xd7\xd3\x15\xd2\xb8\x8e\xbf\xf3\x5b\x8b\x04\x60\x7f\x64\xac\x36\xd6\x3f\x33\x59\xd5\x25\xa7\x22\x63\xfb\xe6\xf2\x6e\xf5\x1e\x9a\xb5\x0b\x6c\x29\x04\xdd\x4e\xd1\x7e\x14\x50\xe3\x5a\xfa\x50\x18\x53\x7f\xec\xf7\xd7\xeb\x75\x8f\x3a\x29\x7b\x52\x2d\xfb\x6d\x7c\xeb\x7e\xfb\x19\xf7\xbb\xab\xde\x25\x42\x53\x51\x32\xad\x41\xb1\x7f\x35\x5c\xb1\x1c\xe6\x1b\xa0\x75\x5d\xf2\x8c\xce\x4b\x06\x25\x5d\xdb\x60\xa1\x4b\xc5\xb6\xc1\xcb\x85\x6b\x1f\x73\xb1\xf4\xf6\xe0\xeb\xf4\x7b\xba\x06\xda\x49\xc5\x35\x74\x07\xb8\xde\xfa\x2e\x7c\xe0\xda\x4f\x48\xe2\xa1\x47\x41\x44\x70\xeb\x91\xe1\x80\xd8\x3b\x9f\x1c\x07\x55\xdb\x5e\x67\x7f\xd4\xca\xca\x2e\x15\x70\x6b\x3a\x96\xf7\x50\xc2\xd8\xd1\xe6\x8b\xb6\xd5\xbe\x6f\x81\x97\x54\x2c\x1b\xba\x64\xb0\x94\x2b\xa6\x1c\xcf\x0f\xfc\x70\x1f\x0a\xa0\x03\x53\xf5\x53\x75\x7a\x0e\x49\x07\x5a\x6d\xb9\xbe\x66\x8a\x39\x8c\x6c\xad\x34\x94\xae\x1d\x0f\x41\x7b\x59\x2e\xa0\xe4\x73\xeb\x72\x2d\x39\x8b\x46\x23\xcb\x46\x6d\xb8\x4b\xde\x56\xac\xb5\xbd\x29\x18\x57\x20\x15\x5f\x72\x41\xcb\x0e\xf4\xec\xb4\xf6\x0e\x6e\x3f\xdc\x00\x5a\xf3\xac\xb7\x94\xee\x3f\x73\x5f\x80\xa8\xfd\x71\x4d\x95\xee\x1c\x2a\x46\xf3\xce\xa1\xce\xa8\x10\x9d\xe3\xed\xfb\xc3\xfd\xa1\x95\xb3\xe8\x1e\xd4\x8a\xaf\xa8\x61\xee\xdc\x93\x67\xee\xe5\x07\xf8\xc2\x95\x55\x23\xe1\x95\x14\x72\x75\x4e\xdf\x5f\x9a\xbe\xa3\xef\x7b\xcc\x3e\x4e\xdf\xd1\xf9\x31\x7b\x7e\xcc\xfe\x98\xc7\xec\x7f\x02\x00\x00\xff\xff\xbe\xbd\xbb\x9c\x36\x34\x00\x00")

func tmpLicensesBytes() ([]byte, error) {
	return bindataRead(
		_tmpLicenses,
		"tmp/LICENSES",
	)
}

func tmpLicenses() (*asset, error) {
	bytes, err := tmpLicensesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/LICENSES", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/LICENSES": tmpLicenses,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"LICENSES": &bintree{tmpLicenses, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

